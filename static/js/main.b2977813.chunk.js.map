{"version":3,"sources":["Header/index.js","Form/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","headerH1","className","Form","selectDescription","inputDescription","buttonDescription","outcomeDescription","name","class","value","type","step","min","max","placeholder","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qQAQeA,G,UALA,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OAAiB,4BAAQC,UAAU,UAClD,wBAAIA,UAAU,cAAcD,MCiCbE,G,MAlCF,SAAC,GAAD,IAAGC,EAAH,EAAGA,kBAAmBC,EAAtB,EAAsBA,iBAAkBC,EAAxC,EAAwCA,kBAAmBC,EAA3D,EAA2DA,mBAA3D,OACT,0BAAML,UAAU,QACZ,uBAAGA,UAAU,mBACb,2BACF,mCAASE,EAAkB,4BAAQI,KAAK,SAASC,MAAM,4BACnD,4BAAQC,MAAM,OAAd,SACA,4BAAQA,MAAM,OAAd,WAEF,+BACKL,EACD,2BACIH,UAAU,yBACVQ,MAAM,MACNC,KAAK,SACLC,KAAK,OACLC,IAAI,QACJC,IAAI,UACJC,YAAY,MACZC,UAAQ,MAKhB,4BAAQd,UAAU,gBACbI,GAGL,2BAAIC,EACA,4BAAQL,UAAU,cAAlB,WCSGe,MAnCf,WAiBE,OACE,yBAAKf,UAAU,QACb,kBAAC,EAAD,CACED,SAAS,qBAEX,kBAAC,EAAD,CACEG,kBAAkB,uBAClBC,iBAAiB,2BACjBC,kBAAkB,gBAClBC,mBAAmB,gBCnBPW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b2977813.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./style.css\"\r\n\r\nconst Header = ({headerH1}) => (<header className=\"header\">\r\n<h1 className=\"header__h1\">{headerH1}</h1>\r\n</header>\r\n);\r\n\r\nexport default Header;","import React from \"react\"\r\nimport \"./style.css\"\r\n\r\nconst Form = ({ selectDescription, inputDescription, buttonDescription, outcomeDescription }) => (\r\n    <form className=\"form\">\r\n        <p className=\"form__paragraph\">\r\n        <p>\r\n      <label> {selectDescription}<select name=\"Waluta\" class=\"js-currency form__select\">\r\n          <option value=\"USD\">Dolar</option>\r\n          <option value=\"EUR\">Euro</option>\r\n        </select></label></p>\r\n        <label>\r\n            {inputDescription}\r\n            <input\r\n                className=\"js-amount form__select\"\r\n                value=\"500\"\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                min=\"f0.01\"\r\n                max=\"1000000\"\r\n                placeholder=\"500\"\r\n                required\r\n            />\r\n        </label>\r\n    </p>\r\n\r\n        <button className=\"form__button\">\r\n            {buttonDescription}\r\n        </button>\r\n\r\n        <p>{outcomeDescription}\r\n            <strong className=\"js-outcome\">N/D</strong></p>\r\n            </form>\r\n        \r\n        \r\n);\r\n\r\nexport default Form;\r\n","import React from 'react';\nimport Header from \"./Header\"\nimport Form from \"./Form\"\nimport { currencies } from \"./currencies.js\"\n\nfunction App() {\n  // const [result, setResult] = useState();\n\n  // const calculateResult = (currency, amount) => {\n\n  //   const rate = currencies\n  //     .find(({ short }) => short === currency)\n  //     .rate;\n\n  //   setResult({\n  //     sourceAmount: +amount,\n  //     targetAmount: amount / rate,\n  //     currency,\n  //   });\n  // }\n\n  // )\n  return (\n    <div className=\"body\">\n      <Header\n        headerH1=\"Kalkulator walut\"\n      />\n      <Form\n        selectDescription=\"Wybierz walutę:\"\n        inputDescription=\"Wpisz wartość:\"\n        buttonDescription=\"Przelicz kurs\"\n        outcomeDescription=\"Otrzymasz\"\n      />\n\n\n    </div>\n  );\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}